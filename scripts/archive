#!/usr/bin/env python3

import argparse
import sys
import os
import pkg_resources

sys.path.append('../')
sys.path.append('./')

from archive_project.get_studies import get_studies
from archive_project.get_lanes import get_lanes
from archive_project.get_files import get_files 
#from MYPROJECT.MYCLASS import MYCLASS
#from MYPROJECT.InputTypes import InputTypes

version = ''
try:
	version = pkg_resources.get_distribution("archive_project").version
except pkg_resources.DistributionNotFound:
	version = 'x.y.z'

parser = argparse.ArgumentParser(
	description = 'Archive nfs that isn\'t backed up or easily reproducible',
	usage = 'MYSCRIPT [options]', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
#ÃŸparser.add_argument('--foo', help='Example option foo', type=InputTypes.is_foo_valid )
#parser.add_argument('--output_file', '-o', help='Output file [STDOUT]')
#parser.add_argument('--verbose', '-v', action='store_true', help='Turn on debugging [%(default)s]', default = False)
#parser.add_argument('--version', action='version', version=str(version))
parser.add_argument('database', metavar='d', type=str, nargs=1, help='database to be archived')

options = parser.parse_args()

study_find = get_studies(options) 
studies = study_find.read_studies()
if studies is not None: 
	for study in studies: 
		lane_find = get_lanes(study)
		data = lane_find.pf_data()
		if studies is not None: 
			for path in data: 
				file_find = get_files(path)
				#output rsync folder and then put into function to backup 

